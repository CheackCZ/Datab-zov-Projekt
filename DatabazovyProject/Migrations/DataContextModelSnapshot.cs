// <auto-generated />
using System;
using DatabazovyProject.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DatabazovyProject.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DatabazovyProjekt.Author", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Portfolio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("DatabazovyProjekt.Bank_Transfer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("IBAN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Variable_Symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Bank_Transfers");
                });

            modelBuilder.Entity("DatabazovyProjekt.Credit_Card", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CVV")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Card_Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("Expiration_date")
                        .HasColumnType("date");

                    b.HasKey("ID");

                    b.ToTable("Credit_Cards");
                });

            modelBuilder.Entity("DatabazovyProjekt.Customer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("DatabazovyProjekt.Item", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("ObjednavkaCustomer_id")
                        .HasColumnType("int");

                    b.Property<int>("ObjednavkaPayment_id")
                        .HasColumnType("int");

                    b.Property<int>("Objednavka_id")
                        .HasColumnType("int");

                    b.Property<int>("PriceOfItem")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("TemplateID")
                        .HasColumnType("int");

                    b.Property<int>("Template_id")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("TemplateID");

                    b.HasIndex("ObjednavkaPayment_id", "ObjednavkaCustomer_id");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("DatabazovyProjekt.Objednavka", b =>
                {
                    b.Property<int>("Payment_id")
                        .HasColumnType("int");

                    b.Property<int>("Customer_id")
                        .HasColumnType("int");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<int>("Order_number")
                        .HasColumnType("int");

                    b.Property<int>("Order_price")
                        .HasColumnType("int");

                    b.HasKey("Payment_id", "Customer_id");

                    b.HasIndex("Customer_id");

                    b.ToTable("Objednavkas");
                });

            modelBuilder.Entity("DatabazovyProjekt.Payment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("Bank_TransferID")
                        .HasColumnType("int");

                    b.Property<int>("Bank_Transfer_id")
                        .HasColumnType("int");

                    b.Property<int>("CardID")
                        .HasColumnType("int");

                    b.Property<int>("Card_id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("Bank_TransferID");

                    b.HasIndex("CardID");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("DatabazovyProjekt.Template", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("AuthorID")
                        .HasColumnType("int");

                    b.Property<int>("Author_id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Price")
                        .HasColumnType("int");

                    b.Property<bool>("Priced")
                        .HasColumnType("bit");

                    b.Property<int>("TypID")
                        .HasColumnType("int");

                    b.Property<int>("Typ_id")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AuthorID");

                    b.HasIndex("TypID");

                    b.ToTable("Templates");
                });

            modelBuilder.Entity("DatabazovyProjekt.Typ", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Nazev")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Types");
                });

            modelBuilder.Entity("DatabazovyProjekt.Item", b =>
                {
                    b.HasOne("DatabazovyProjekt.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatabazovyProjekt.Objednavka", "Objednavka")
                        .WithMany()
                        .HasForeignKey("ObjednavkaPayment_id", "ObjednavkaCustomer_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Objednavka");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("DatabazovyProjekt.Objednavka", b =>
                {
                    b.HasOne("DatabazovyProjekt.Customer", "Customer")
                        .WithMany("objednavky")
                        .HasForeignKey("Customer_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatabazovyProjekt.Payment", "Payment")
                        .WithMany("objednavky")
                        .HasForeignKey("Payment_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("DatabazovyProjekt.Payment", b =>
                {
                    b.HasOne("DatabazovyProjekt.Bank_Transfer", "Bank_Transfer")
                        .WithMany()
                        .HasForeignKey("Bank_TransferID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatabazovyProjekt.Credit_Card", "Card")
                        .WithMany()
                        .HasForeignKey("CardID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bank_Transfer");

                    b.Navigation("Card");
                });

            modelBuilder.Entity("DatabazovyProjekt.Template", b =>
                {
                    b.HasOne("DatabazovyProjekt.Author", "Author")
                        .WithMany("templates")
                        .HasForeignKey("AuthorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatabazovyProjekt.Typ", "Typ")
                        .WithMany("templates")
                        .HasForeignKey("TypID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Typ");
                });

            modelBuilder.Entity("DatabazovyProjekt.Author", b =>
                {
                    b.Navigation("templates");
                });

            modelBuilder.Entity("DatabazovyProjekt.Customer", b =>
                {
                    b.Navigation("objednavky");
                });

            modelBuilder.Entity("DatabazovyProjekt.Payment", b =>
                {
                    b.Navigation("objednavky");
                });

            modelBuilder.Entity("DatabazovyProjekt.Typ", b =>
                {
                    b.Navigation("templates");
                });
#pragma warning restore 612, 618
        }
    }
}
